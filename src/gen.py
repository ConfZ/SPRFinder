import os
import src.settings as settings
# from src.settings import para
from src.instance import Instance
import re
# from SMT_generator.generators.my_random_ast import random_ast
from SMT_generator.generator import generate
from SMT_generator.transformers.bandit import bandit
from SMT_generator.constants import SMT_25_STRING
from SMT_generator.parser import parse
import SMT_generator.generators.random_ast_zy as zy


class Generator_Str:
    num = 0

    def __init__(self):
        # self.para = para
        self.ops = settings.string_ops
        self.re_set = [re.compile('\(set-info.*'), re.compile('Generated by:.*'), re.compile('Generated on:.*'),
                       re.compile('Generator:.*'), re.compile('Application:.*'), re.compile('Target solver:.*'),
                       re.compile('\|\)'), re.compile('Publication:\n.*\n.*')]
        self.reg = re.compile('str\.[a-z]*_[a-z]*')

    def gen(self):
        print(os.getcwd())
        # smt = random_ast(num_vars=20, int_num=4, bool_num=2, num_asserts=settings.num_assertions,
        #                  depth=settings.GeneratorMaxDepth, max_terms=5, max_str_lit_length=10, max_int_lit=10,
        #                  semantically_valid=True, literal_probability=0.1)
        smt, statistics = zy.random_ast(max_var_num = settings.max_var_num, max_terms = settings.max_assert_num, max_depth=settings.max_depth, max_str_lit_length=settings.max_str_len, max_int_lit=200, literal_probability=0.1, new_var_probability=0.5,
                                        op_weight=settings.op_dict, semantically_valid=False)
        smt = generate(smt, SMT_25_STRING)

        if smt.count('(set-logic QF_S)') == 0 and smt.count('(set-logic QF_SLIA)') == 0:
            if settings.theory == 'QF_S':
                smt = '(set-logic QF_S)\n' + smt
            elif settings.theory == 'QF_SLIA':
                smt = '(set-logic QF_SLIA)\n' + smt
        # print('cmd:',cmd)
        # print('end')
        assert smt != 'err' or smt != 'timeout' or smt != 'empty', smt
        assert smt.count('assert') > 0, smt

        return Instance(smt, statistics)

    def form(self, smt):
        op = re.findall(self.reg, smt)
        op = list(set(op))
        nop = [R.replace('_', '.') for R in op]
        for i in range(len(nop)):
            smt = smt.replace(op[i], nop[i])
        return smt

    # def get_case(self):
    #     file = settings.InputFiles[Generator_Str.num]
    #     filehandle = open(file, 'r')
    #     smt = filehandle.read()
    #     filehandle.close()
    #     Generator_Str.num += 1
    #     assert Generator_Str.num <= len(settings.InputFiles), 'all the cases is down'
    #     if settings.theory == 'QF_S':
    #         smt = smt.replace('(set-logic QF_SLIA)', '(set-logic QF_S)')
    #     elif settings.theory == 'QF_SLIA':
    #         smt = smt.replace('(set-logic QF_S', '(set-logic QF_SLIA)')
    #     else:
    #         assert False, 'theory out of scope'
    #     if smt.count('(set-logic QF_S)') == 0 and smt.count('(set-logic QF_SLIA)') == 0:
    #         if settings.theory == 'QF_S':
    #             smt = '(set-logic QF_S)\n' + smt
    #         elif settings.theory == 'QF_SLIA':
    #             smt = '(set-logic QF_SLIA)\n' + smt
    #     for R in self.re_set:
    #         smt = re.sub(R, '', smt, count=0)
    #     smt = self.form(smt)
    #     assert smt != 'err' or smt != 'timeout' or smt != 'empty', smt
    #     assert smt.count('assert') > 0, smt
    #
    #     return Instance(smt)

    def mutate(self, instance, action):
        print("Mutated with the following action: " + action)

        loop_count = 0
        smt = ''
        statis = instance.statistics
        while True:
            loop_count += 1
            if loop_count > 100:
                print("Too many failed transformations")
                raise ValueError
            try:
                smt = generate(bandit(parse(instance.primaries, SMT_25_STRING), action, 2), SMT_25_STRING)
                if smt.count('(set-logic QF_S)') == 0 and smt.count('(set-logic QF_SLIA)') == 0:
                    if settings.theory == 'QF_S':
                        smt = '(set-logic QF_S)\n' + smt
                    elif settings.theory == 'QF_SLIA':
                        smt = '(set-logic QF_SLIA)\n' + smt
                assert smt != 'err' or smt != 'timeout' or smt != 'empty'
                assert smt.count('assert') > 0

                break
            except Exception as e:
                print('exception:', e)
                print("On input1:")
                print(instance)
                print("On action:", action)
                print("Outputed illegal smt2 file:")
                print(smt)

        return Instance(smt, statis)


def mk_gen():
    return Generator_Str()
